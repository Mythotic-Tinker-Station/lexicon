str vanillaDoomWeaponArray[9] = { "Fist", "Pistol", "Chainsaw", "Shotgun", "SuperShotgun", "Chaingun", "RocketLauncher", "PlasmaRifle", "BFG9000" };
str vanillaChexWeaponArray[9] = { "Bootspoon", "MiniZorcher", "SuperBootspork", "LargeZorcher", "SuperLargeZorcher", "RapidZorcher", "ZorchPropulsor", "PhasingZorcher", "LAZDevice" };
str vanillaHereticWeaponArray[9] = { "Staff", "GoldWand", "Gauntlets", "Crossbow", "Blaster", "SkullRod", "PhoenixRod", "Mace" };
str vanillaHexenCWeaponArray[4] = { "CWeapMace", "CWeapStaff", "CWeapFlame", "WeapWraithverge" };
str vanillaHexenFWeaponArray[4] = { "FWeapFist", "FWeapAxe", "FWeapHammer", "FWeapQuietus" };
str vanillaHexenMWeaponArray[4] = { "MWeapWand", "MWeapFrost", "MWeapLightning", "MWeapBloodscourge" };

int vanillaDoomAmmoCapacityArray[4] = { 200, 50, 50, 300 };
int vanillaChexAmmoCapacityArray[4] = { 200, 50, 50, 300 };
int vanillaHereticAmmoCapacityArray[6] = { 100, 50, 150, 200, 200, 20 };

function str getDynLangEntry(str p1, str p2, str p3)
{
    // get entry
    str name = strparam(s:p1, s:"_", s:p2, s:"_", s:p3);
    str text = strparam(l:name);

    // check if listing exists
    if(text == name)
    {
		// if it doesnt, return some string to tell us it doesnt exist
        return "_LANG_UNDEFINED_";
    }

	// return the string from language
    return text;
}

function str getDynLangEntry2(str p1, str p2, str p3, str p4)
{
    // get entry
    str name = strparam(s:p1, s:"_", s:p2, s:"_", s:p3, s:"_", s:p4);
    str text = strparam(l:name);

    // check if listing exists
    if(text == name)
    {
		// if it doesnt, return some string to tell us it doesnt exist
        return "_LANG_UNDEFINED_";
    }

	// return the string from language
    return text;
}

// checks if the currently running clientside script is the local client
function bool clientCheck(void)
{
    if(IsNetworkGame()) 
    { 
        if(playerNumber() != consolePlayerNumber()) 
        { 
            return false; 
        } 
    }
	return true;
}

// a null function for blank ui actions
function void nullFunc(int i)
{
    print(s:"No action for obj number: " , i:i);
}

int _spec, _args0, _args1, _args2, _args3, _args4;
function int actorSpawn(str class, str classalt)
{
	// Get actor coordinates
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	int angle = GetActorAngle(0) << 8; // just for logs
	int tid = UniqueTid();

	// Check if there is an alternate actor defined
	if(classalt != "_LANG_UNDEFINED_")
	{
		if(GetCVar("lexicon_vanilla_mode") || isGameModded())
		{
			class = classalt; // Replace the normal actor with the alternate actor
		}
	}

    // Spawn actor
	bool success = SpawnForced(class, x,y,z, tid, angle >> 16);
	if(!success) return false;

    // If the actor is supposed to spawn on the ceiling, adjust the Z position
    // Note: this used to use SetActorPosition, however that function does not work if an actor is in the way.
    if(CheckFlag(tid, "SPAWNCEILING"))
    {
        z = GetActorCeilingZ(tid) - GetActorProperty(tid, APROP_Height);
        Thing_Remove(tid);
	    SpawnForced(class, x,y,z, tid, angle >> 16);
    }

	// remove DROPPED flag
	if (Timer() < 1)
	{
		SetActorProperty(tid, APROP_Dropped, 0);
	}

	// Transfer flags, store as spawner's tracer and finally transfer tid
	if(CheckFlag(0,"FRIENDLY")) GiveActorInventory(tid, "LexiconFriendlyProc", 1);
	if(CheckFlag(0,"AMBUSH"  )) GiveActorInventory(tid, "LexiconAmbushProc", 1);
	if(GetUserVariable(tid,"user_dormant"))
	{
		Thing_Deactivate(tid);
	}

	SetPointer(AAPTR_TRACER, tid);
	GiveInventory("LexiconTransferSpecialProc", 1); // <-- given to spawner, not spawnee!
	SetThingSpecial(tid, _spec, _args0, _args1, _args2, _args3, _args4);
	Thing_ChangeTid(tid, ActivatorTid());
	Thing_ChangeTid(0, 0); // release tid from spawner itself
	//printbold(s:"\c-Spawned ", s:"\cv", s:class, s:"\c- at (", f:x, s:", ", f:y, s:", ", f:z, s:"; angle ", f:angle, s:").");

	Thing_Remove(0);

	return true;
}

script "XCDE_StoreSpecial1" (int spec, int args0, int args1)
{
	_spec = spec;
	_args0 = args0;
	_args1 = args1;
}

script "XCDE_StoreSpecial2" (int args2, int args3, int args4)
{
	_args2 = args2;
	_args3 = args3;
	_args4 = args4;
}

function void addLexiconInventory(str mapset, int i, int j)
{
	str weaponActor = getDynLangEntry(mapset, "WEAPON", strparam(i:i));
	if(weaponActor != "_LANG_UNDEFINED_") { GiveInventory(weaponActor, 1); }
	if (j > 0) { SetWeapon(weaponActor); }

	switch(i)
	{
		case 2:
			TakeInventory("Clip", 20);
			break;
		case 4:
			TakeInventory("Shell", 8);
			break;
		case 5:
			TakeInventory("Shell", 8);
			break;
		case 6:
			TakeInventory("Clip", 20);
			break;
		case 7:
			TakeInventory("RocketAmmo", 2);
			break;
		case 8:
			TakeInventory("Cell", 40);
			break;
		case 9:
			TakeInventory("Cell", 40);
			break;
	}
}

function void addLexiconVanillaInventory(int i, int j)
{
	switch(GetCVar("lexicon_iwad"))
	{
	case 0:
		GiveInventory(vanillaDoomWeaponArray[i-1], 1);
		if (j > 0) { SetWeapon(vanillaDoomWeaponArray[i-1]); }
		break;
	case 1:
		GiveInventory(vanillaChexWeaponArray[i-1], 1);
		if (j > 0) { SetWeapon(vanillaChexWeaponArray[i-1]); }
		break;
	case 2:
		GiveInventory(vanillaHereticWeaponArray[i-1], 1);
		if (j > 0) { SetWeapon(vanillaHereticWeaponArray[i-1]); }
		break;
	}

	switch(i)
	{
		case 2:
			TakeInventory("Clip", 20);
			break;
		case 4:
			TakeInventory("Shell", 8);
			break;
		case 5:
			TakeInventory("Shell", 8);
			break;
		case 6:
			TakeInventory("Clip", 20);
			break;
		case 7:
			TakeInventory("RocketAmmo", 2);
			break;
		case 8:
			TakeInventory("Cell", 40);
			break;
		case 9:
			TakeInventory("Cell", 40);
			break;
	}
}

function void addLexiconAmmo(void)
{
	switch(GetCVar("lexicon_iwad"))
	{
	case 0:
		GiveInventory("Clip", 50);
		break;
	case 1:
		GiveInventory("MiniZorchRecharge", 50);
		break;
	case 2:
		GiveInventory("GoldWandAmmo", 50);
		break;
	}
}

function void getLexiconIwad(void)
{
	int checkerTid = UniqueTid();
	int iwadTid = UniqueTid();
	SpawnForced("LexiconGameTokenChecker", 0.0 , 0.0, 0.0, iwadTid);
	Thing_SpawnNoFog(iwadTid, 240, 0, checkerTid);

	if(GetActorClass(iwadTid) == "LexiconGameTokenChex")
		SetCVar("lexicon_iwad", 1);
	else if(GetActorClass(iwadTid) == "LexiconGameTokenHeretic")
		SetCVar("lexicon_iwad", 2);
	else if(GetActorClass(iwadTid) == "LexiconGameTokenHexen")
		SetCVar("lexicon_iwad", 3);
	else
		SetCVar("lexicon_iwad", 0);

	Thing_Remove(iwadTid);
	Thing_Remove(checkerTid);
}

// sort an array of integers
/*
function void bubble_sort(int[]& a)
{
	for (int i = 0; i < lengthof(a) - 1; i++)
	{
		for (int j = 0; j < lengthof(a) - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				int temp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp;
			}
		}
	}
}*/