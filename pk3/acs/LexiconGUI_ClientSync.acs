int playerVotes[64][2] = {};
int winningSets[64][2] = {};
str VotesDisplay[64] = {};
int pollTypes[64] = {};

int voteTimeLimit;

Script "Lexicon_SyncClientData" (int player)
{
	int i = 0;
	//We don't need to do this in singleplayer. And no need to sync clients that are already synced!
	if(GameType() == 0 || pollTypes[player] == 2) terminate;
	
	//Let's init the cached mapsets first. If it's already 1 or 2, best to just skip this
	until(pollTypes[player] == 1)
	{
		ACS_NamedExecuteWithResult("Lexicon_ClearClientMapCache", player);
		Delay(1);
	}
	
	//Sync current player votes and wait
	for(i = 0; i < 64; i++)
		ACS_NamedExecuteWithResult("Lexicon_SendVoteToClient",i,playerVotes[i][0],playerVotes[i][1]);	
		
	//Keep checking if this script has spat a value back to the array for polling
	until(pollTypes[player] == 2)
	{
		NamedSendNetworkString("Lexicon_SendMapInfoToClient",serverAcronymsString,player);
		Delay(1);
	}

	//Everytime the missing maps issue occurs, this script was executed twice. Maybe that will help here?
	NamedSendNetworkString("Lexicon_SendMapInfoToClient",serverAcronymsString,player);

	//Generate all of the map info on the client. It's better off this way
	ACS_NamedExecuteWithResult("Lexicon_GenerateMaps_Client", player);
}

Script "Lexicon_SendVoteToClient" (int player, int value1, int value2) clientside
{
	playerVotes[player][0] = value1;
	playerVotes[player][1] = value2;
}

Script "Lexicon_ClearClientMapCache" (int player) clientside
{
	if(player != ConsolePlayerNumber()) terminate;
	clearLexiconMapSetTypes();
	NamedRequestScriptPuke("Lexicon_SendTypePollToServer",PlayerNumber(),1);
}

Script "Lexicon_SendMapInfoToClient" (int value) clientside
{
	int counter = 0;
	while(strlen(value) > 1)
	{
		str stringValue = StrLeft(value,4);
		value = StrRight(value,strlen(value)-4);
		if(stringValue != "")
			existingMapSetTypes[counter] = stringValue;
			
		//PrintBold(s:"Acronym parsed: ",s:existingMapSetTypes[counter]);
		counter++;
	}
	NamedRequestScriptPuke("Lexicon_SendTypePollToServer",PlayerNumber(),2);
}

Script "Lexicon_SendTypePollToServer" (int player, int value) NET
{
	pollTypes[player] = value;
}

script "Lexicon_PlayerConnect" (int type, int arg1, int arg2) EVENT
{
	if(!isVR())
		terminate;	
		
	//GAMEEVENT_PLAYERCONNECT
	if(type == 9)
	{
		ACS_NamedExecuteWithResult("Lexicon_SyncClientData",PlayerNumber());
	} //Signal that this client id is no longer synced
	else if(type == 15) pollTypes[arg1] = 0;
			
	while(PlayerIsSpectator(arg1))
	{
		ACS_NamedExecuteWithResult("Lexicon_VoteTextDisplay",VoteTimeLimit,WAITTIMER);

		Delay(1);
	}
}

Script "Lexicon_PlayerDisconnect" (int player) DISCONNECT
{
	if(!isVR())
		terminate;	
		
	removeVote(player);
	SetActivator(0,player);
	RemoveMessages(100,160);
	SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
	
	while(PlayerIsSpectator(player))
	{
		ACS_NamedExecuteWithResult("Lexicon_VoteTextDisplay",VoteTimeLimit,WAITTIMER);
		
		Delay(1);
	}
}