#define MAX_EXPANSIONS 16
#define MAX_MAPSETS 1024

str expansions[MAX_EXPANSIONS];
str mapSetsAcronym[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsTitle[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsAuthors[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsMaps[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsDate[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsCustom[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsThumbnail[MAX_EXPANSIONS][MAX_MAPSETS];

int expansionCount = 0;
int expansionTotalCount = 0;
int mapSetCount = 0;
int mapSetTotalCount[MAX_EXPANSIONS];
bool mapSetIsSelected = false;
str selectedMapSet = "";

function void initiateLexiconMaps(void)
{
	for (int i = 1; i < MAX_EXPANSIONS; i++)
	{
		expansions[expansionCount] = getDynLangEntry2("ADD", "MAPSET", strparam(i:i), strparam(i:1));

		if (expansions[expansionCount] != "_LANG_UNDEFINED_")
		{
			for (int j = 1; j < MAX_MAPSETS; j++)
			{
				mapSetsAcronym[expansionCount][mapSetCount] = getDynLangEntry2("ADD", "MAPSET", strparam(i:i), strparam(i:j));

				if (mapSetsAcronym[expansionCount][mapSetCount] != "_LANG_UNDEFINED_")
				{
					mapSetsTitle[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "TITLE");
					mapSetsAuthors[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "AUTHORS");
					mapSetsMaps[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "MAPS");
					mapSetsDate[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "DATE");
					mapSetsCustom[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "CUSTOM");

					if (CheckFont(strparam(s:mapSetsAcronym[expansionCount][mapSetCount], s:"TN"))) 
					{
						mapSetsThumbnail[expansionCount][mapSetCount] = StrParam(s:mapSetsAcronym[expansionCount][mapSetCount], s:"TN"); 
					}
					else { mapSetsThumbnail[expansionCount][mapSetCount] = "BLNKTN"; }
					mapSetCount++;
				}
			}
			expansionCount++;
			expansionTotalCount++;
			mapSetTotalCount[expansionTotalCount-1] = mapSetCount;
		}
		mapSetCount = 0;
	}
	expansionCount = 0;
}

function str getDynLangEntry(str p1, str p2, str p3)
{
    // get entry
    str name = strparam(s:p1, s:"_", s:p2, s:"_", s:p3);
    str text = strparam(l:name);

    // check if listing exists
    if(text == name)
    {
		// if it doesnt, return some string to tell us it doesnt exist
        return "_LANG_UNDEFINED_";
    }

	// return the string from language
    return text;
}

function str getDynLangEntry2(str p1, str p2, str p3, str p4)
{
    // get entry
    str name = strparam(s:p1, s:"_", s:p2, s:"_", s:p3, s:"_", s:p4);
    str text = strparam(l:name);

    // check if listing exists
    if(text == name)
    {
		// if it doesnt, return some string to tell us it doesnt exist
        return "_LANG_UNDEFINED_";
    }

	// return the string from language
    return text;
}

// checks if the currently running clientside script is the local client
function bool clientCheck(void)
{
    if(IsNetworkGame()) 
    { 
        if(playerNumber() != consolePlayerNumber()) 
        { 
            return false; 
        } 
    }
	return true;
}

// a null function for blank ui actions
function void nullFunc(int i)
{
    print(s:"No action for obj number: " , i:i);
}

int _spec, _args0, _args1, _args2, _args3, _args4;
function int actorSpawn(str class, str classalt)
{
	// Get actor coordinates
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	int angle = GetActorAngle(0) << 8; // just for logs
	int tid = UniqueTid();

	// Check if there is an alternate actor defined
	if(classalt != "_LANG_UNDEFINED_")
	{
		if(GetCVar("lexicon_vanilla_mode") || isGameModded())
		{
			class = classalt; // Replace the normal actor with the alternate actor
		}
	}

    // Spawn actor
	bool success = SpawnForced(class, x,y,z, tid, angle >> 16);
	if(!success) return false;

    // If the actor is supposed to spawn on the ceiling, adjust the Z position
    // Note: this used to use SetActorPosition, however that function does not work if an actor is in the way.
    if(CheckFlag(tid, "SPAWNCEILING"))
    {
        z = GetActorCeilingZ(tid) - GetActorProperty(tid, APROP_Height);
        Thing_Remove(tid);
	    SpawnForced(class, x,y,z, tid, angle >> 16);
    }

	// remove DROPPED flag
	if (Timer() < 1)
	{
		SetActorProperty(tid, APROP_Dropped, 0);
	}

	// Transfer flags, store as spawner's tracer and finally transfer tid
	if(CheckFlag(0,"FRIENDLY")) GiveActorInventory(tid, "LexiconFriendlyProc", 1);
	if(CheckFlag(0,"AMBUSH"  )) GiveActorInventory(tid, "LexiconAmbushProc", 1);
	if(GetUserVariable(tid,"user_dormant"))
	{
		Thing_Deactivate(tid);
	}

	SetPointer(AAPTR_TRACER, tid);
	GiveInventory("LexiconTransferSpecialProc", 1); // <-- given to spawner, not spawnee!
	SetThingSpecial(tid, _spec, _args0, _args1, _args2, _args3, _args4);
	Thing_ChangeTid(tid, ActivatorTid());
	Thing_ChangeTid(0, 0); // release tid from spawner itself
	//printbold(s:"\c-Spawned ", s:"\cv", s:class, s:"\c- at (", f:x, s:", ", f:y, s:", ", f:z, s:"; angle ", f:angle, s:").");

	Thing_Remove(0);

	return true;
}

script "XCDE_StoreSpecial1" (int spec, int args0, int args1)
{
	_spec = spec;
	_args0 = args0;
	_args1 = args1;
}

script "XCDE_StoreSpecial2" (int args2, int args3, int args4)
{
	_args2 = args2;
	_args3 = args3;
	_args4 = args4;
}

// sort an array of integers
/*
function void bubble_sort(int[]& a)
{
	for (int i = 0; i < lengthof(a) - 1; i++)
	{
		for (int j = 0; j < lengthof(a) - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				int temp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp;
			}
		}
	}
}*/