#define MAX_EXPANSIONS 16
#define MAX_MAPSETS 1024

str expansions[MAX_EXPANSIONS];
str mapSetsAcronym[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsTitle[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsAuthors[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsMaps[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsDate[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsCustom[MAX_EXPANSIONS][MAX_MAPSETS];
str mapSetsThumbnail[MAX_EXPANSIONS][MAX_MAPSETS];

int expansionCount = 0;
int expansionTotalCount = 0;
int mapSetCount = 0;
int mapSetTotalCount[MAX_EXPANSIONS];
bool mapSetIsSelected = false;
str selectedMapSet = "";

function void initiateLexiconMaps(void)
{
	for (int i = 1; i < MAX_EXPANSIONS; i++)
	{
		expansions[expansionCount] = getDynLangEntry2("ADD", "MAPSET", strparam(i:i), strparam(i:1));

		if (expansions[expansionCount] != "_LANG_UNDEFINED_")
		{
			for (int j = 1; j < MAX_MAPSETS; j++)
			{
				mapSetsAcronym[expansionCount][mapSetCount] = getDynLangEntry2("ADD", "MAPSET", strparam(i:i), strparam(i:j));

				if (mapSetsAcronym[expansionCount][mapSetCount] != "_LANG_UNDEFINED_")
				{
					mapSetsTitle[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "TITLE");
					mapSetsAuthors[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "AUTHORS");
					mapSetsMaps[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "MAPS");
					mapSetsDate[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "DATE");
					mapSetsCustom[expansionCount][mapSetCount] = getDynLangEntry(mapSetsAcronym[expansionCount][mapSetCount], "MAPSET", "CUSTOM");

					if (CheckFont(strparam(s:mapSetsAcronym[expansionCount][mapSetCount], s:"TN"))) 
					{
						mapSetsThumbnail[expansionCount][mapSetCount] = StrParam(s:mapSetsAcronym[expansionCount][mapSetCount], s:"TN"); 
					}
					else { mapSetsThumbnail[expansionCount][mapSetCount] = "BLNKTN"; }
					mapSetCount++;
				}
			}
			expansionCount++;
			expansionTotalCount++;
			mapSetTotalCount[expansionTotalCount-1] = mapSetCount;
		}
		mapSetCount = 0;
	}
	expansionCount = 0;
}

function bool checkForLexiconMaps(void)
{
	if (mapSetTotalCount[0] > 0) { return true; }
	else { return false; }
}

function void displayLexiconUIControls(void)
{
	SetFont("CONFONT");
	SetHudSize(640, 480, TRUE);

	str switchPortPrompt = StrParam(l:"LEXICON_UI_PRESS_PROMPT_1", k:"+moveright", s:"/", k:"+moveleft", l:"LEXICON_UI_PRESS_PROMPT_2");
	str switchMapPrompt = StrParam(l:"LEXICON_UI_PRESS_PROMPT_1", k:"+forward", s:"/", k:"+back", l:"LEXICON_UI_PRESS_PROMPT_3");
	str selectMapPrompt = StrParam(l:"LEXICON_UI_PRESS_PROMPT_1", k:"+fire", l:"LEXICON_UI_PRESS_PROMPT_4");
	str exitPrompt = StrParam(l:"LEXICON_UI_PRESS_PROMPT_1", k:"+speed", l:"LEXICON_UI_PRESS_PROMPT_5");

	if (checkForLexiconMaps())
	{
		HudMessage(s:switchPortPrompt; HUDMSG_PLAIN, 550, CR_UNTRANSLATED, 320.0, 350.0, 0);
		HudMessage(s:switchMapPrompt; HUDMSG_PLAIN, 551, CR_UNTRANSLATED, 320.0, 360.0, 0);
		HudMessage(s:selectMapPrompt; HUDMSG_PLAIN, 552, CR_UNTRANSLATED, 320.0, 370.0, 0);
		HudMessage(s:exitPrompt; HUDMSG_PLAIN, 553, CR_UNTRANSLATED, 320.0, 380.0, 0);
	}
	else
	{
		HudMessage(l:"LEXICON_UI_NO_MAPSETS"; HUDMSG_PLAIN, 550, CR_UNTRANSLATED, 320.0, 240.0, 0);
		HudMessage(s:exitPrompt; HUDMSG_PLAIN, 553, CR_UNTRANSLATED, 320.0, 380.0, 0);
	}
}

function void displayLexiconUIMapSetMetadata(int expansion, int mapset)
{
	if (!checkForLexiconMaps()) { return; }

	if (CheckFont(strparam(s:mapSetsAcronym[expansion][mapset], s:"TN"))) 
	{
		SetFont(strparam(s:mapSetsAcronym[expansion][mapset], s:"TN"));
	}
	else { SetFont("BLNKTN"); }
	SetHudSize(640, 480, TRUE);
	HudMessage(s:"A"; HUDMSG_PLAIN, 555, CR_UNTRANSLATED, 320.0, 200.0, 0);

	SetFont("CONFONT");
	HudMessage(s:mapSetsTitle[expansion][mapset]; HUDMSG_PLAIN, 556, CR_UNTRANSLATED, 320.0, 260.0, 0);
	HudMessage(l:"LEXICON_UI_AUTHORS", s:mapSetsAuthors[expansion][mapset]; HUDMSG_PLAIN, 557, CR_UNTRANSLATED, 320.0, 275.0, 0);
	HudMessage(l:"LEXICON_UI_MAPS", s:mapSetsMaps[expansion][mapset]; HUDMSG_PLAIN, 558, CR_UNTRANSLATED, 320.0, 290.0, 0);
	HudMessage(l:"LEXICON_UI_DATE", s:mapSetsDate[expansion][mapset]; HUDMSG_PLAIN, 559, CR_UNTRANSLATED, 320.0, 305.0, 0);

	if (mapSetsCustom[expansion][mapset] == "Y") { HudMessage(l:"LEXICON_UI_CUSTOM", l:"LEXICON_UI_CUSTOM_YES"; HUDMSG_PLAIN, 560, CR_UNTRANSLATED, 320.0, 320.0, 0); }
	else { HudMessage(l:"LEXICON_UI_CUSTOM", l:"LEXICON_UI_CUSTOM_NO"; HUDMSG_PLAIN, 560, CR_UNTRANSLATED, 320.0, 320.0, 0); }
}

function void clearLexiconUI(void)
{
	for (int i = 550; i < 575; i++)
	{
		HudMessage(s:""; HUDMSG_PLAIN, i, 1, 0.0, 0.0, 1);
	}
}

function void displayLexiconVotedMapSet(int expansion, int mapset, int player)
{
	if (PlayerCount() > 1)
	{
		for (int i = 0; i < PlayerCount(); i++)
		{
			if (i != player)
			{
				HudMessage(s:mapSetsTitle[expansion][mapset], l:"LEXICON_UI_SELECTED"; HUDMSG_FADEOUT, 561, CR_UNTRANSLATED, 320.0, 135.0, 135.0, 0);
			}
		}
	}
}

script "LexiconHubMapSelector" (void)
{
	Thing_Stop(0);
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	FadeTo(0, 0, 0, 0.5, 0);

	int i = 0;
	int j = 0;

	while (true)
	{
		SetFont("CONFONT");
		SetHudSize(640, 480, TRUE);
		int buttons = GetPlayerInput(-1, INPUT_BUTTONS);

		displayLexiconUIControls();
		displayLexiconUIMapSetMetadata(i, j);

		if (checkForLexiconMaps())
		{
			if (buttons & BT_MOVERIGHT)
			{
				if (i >= expansionTotalCount-1) { i == 0; }
				else { i++; j = 0; Delay(3); }
			}

			if (buttons & BT_MOVELEFT)
			{
				if (i <= 0) { i == expansionTotalCount; }
				else { i--; j = 0; Delay(3); }
			}

			if (buttons & BT_FORWARD)
			{
				if (j >= mapSetTotalCount[i]-1) { j == 0; }
				else { j++; Delay(3); }
			}

			if (buttons & BT_BACK)
			{
				if (j <= 0) { j == mapSetTotalCount[i]; }
				else { j--; Delay(3); }
			}
			
			if (buttons & BT_ATTACK)
			{
				selectedMapSet = (strparam(s:mapSetsAcronym[i][j]));
				mapSetIsSelected = true;
				displayLexiconVotedMapSet(i, j, PlayerNumber());
				HudMessage(s:mapSetsTitle[i][j], l:"LEXICON_UI_SELECTED"; HUDMSG_PLAIN, 561, CR_UNTRANSLATED, 320.0, 135.0, 0);
			}
		}

		if (buttons & BT_SPEED)
		{
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			FadeTo(0, 0, 0, 0.0, 0);

			clearLexiconUI();
			terminate;
		}
		delay(1);
	}
}

script "LexiconHubMapWarp" (void)
{
	str fistActor = getDynLangEntry(selectedMapSet, "WEAPON", strparam(s:"1"));
	str pistolActor = getDynLangEntry(selectedMapSet, "WEAPON", strparam(s:"2"));

	if (mapSetIsSelected)
	{
		if (!GetCVar("lexicon_vanilla_mode") && !isGameModded())
		{
			if (fistActor != "_LANG_UNDEFINED_") { addLexiconInventory(selectedMapSet, 1, 0); }
			else { addLexiconVanillaInventory(1, 0); }

			GiveInventory("Clip", 50);
			if (pistolActor != "_LANG_UNDEFINED_") { addLexiconInventory(selectedMapSet, 2, 1); }
			else { addLexiconVanillaInventory(2, 1); }
		}

		ChangeLevel(strParam(s:selectedMapSet, d:0, d:1), 0, CHANGELEVEL_NOINTERMISSION, -1);
	}
}

/*
Considering that I barely have any experience with advanced ACS, I'm
kind of impressed with what I came up with for the hub. There's still
tons of stuff that I haven't covered like better iwad compatibility,
but it should now be ready for Doom 2 mapsets.
*/